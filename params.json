{"name":"Install-discourse","tagline":"","body":"# Installing Discourse on Ubuntu and DigitalOcean\r\nCopyright 2013 by Christopher Baus <christopher@baus.net>. Licensed under GPL 2.0\r\n\r\nAlso see: [install-discourse.org](http://install-discourse.org).\r\n\r\nYou may want to review the [screen capture](http://player.vimeo.com/video/62145259) of this installation process. \r\n\r\nDiscourse is [web forum software](http://discourse.org) by Jeff Atwood (et al.). Considering the \r\nstate of forum software, and Jeff's previous success with StackOverflow, I'm confident it is going to be a success. \r\nWith that said it is still in a very early state, and if you are not an expert on Linux and Ruby on Rails administration, \r\ngetting a Discourse site up and running can be a daunting task. \r\n\r\nHopefully the document will be useful for someone who has some Linux administration experience and wants to run and\r\nadministrate their own Discourse server. I am erring on the side of verbosity.\r\n\r\n\r\n### Create DigitalOcean VPS with Ubuntu 12.10x64\r\n\r\nWhile these instructions should work fine on most Ubuntu installations, I have explicitly tested them on DigitalOcean. \r\nDigitalOcean offers low cost VPS hosting, but I can not vouch for their reliability. \r\n\r\nI decided on Ubuntu 12.10 x64 which is the most recent Ubuntu release and contains the most recent packages. If you \r\nconcerned about the long term stability of your systems, you may want to consider Ubuntu 12.04 LTS which has \r\ngaurenteed support until 2017, but the installation instructions are a bit different due to availability of some packages.\r\n\r\nBefore creating your DigitalOcean instance, you should register the domain name you want to use for your forum. I'm using \r\ndiscoursetest.org for this instance, and forum.discoursetest.org as the FQDN.  \r\n\r\nAfter creating your account at DigitalOcean, create a Droplet *with at least 1GB of RAM* [1], and select the Ubuntu  \r\nOS image you want to use. I set the Hostname to forum.discoursetest.org. \r\n\r\nDigitalOcean will email the IP address and root password to you. You should go to your domain registrar and set the \r\nDNS records to point to your new IP. I've set both the * and @ records to point to the VPS IP. This enables the root \r\ndomain and all sub-domains to resolve to VPS instance's IP address. \r\n\r\n[1] A minimum of 1GB of RAM is required to compile assets for production.\r\n\r\n\r\n### Login to your server\r\n\r\nI will use discoursetest.org when a domain name is required in the installation. You should replace \r\ndiscoursetest.org with your own domain name. If you are using OS X or Linux, start a terminal and ssh to \r\nyour new server. Windows users should consider installing [Putty](http://putty.org/) to access your new server.\r\n\r\n```bash\r\n# From your local shell on OS X or Linux\r\n# Remember to replace discoursetest.org with your own domain.\r\n~$ ssh root@discoursetest.org\r\n# Enter the root password provided by DigitalOcean\r\n```\r\n\r\n### Change your root password\r\n\r\nSince your password has been emailed to you in clear text, you should immediately change your password for security reasons.\r\n\r\n```bash\r\nroot@host:~# passwd\r\n# # Enter your new password\r\n```\r\n\r\n### Create a user account\r\n\r\nIt is poor practice to admin your system from the root account. Create an administrative account. I'm going to \r\ncall the new user \"admin.\"\r\n\r\nAdding the user to the sudo group will allow the user to perform tasks as root using the \r\n[sudo](https://help.ubuntu.com/community/RootSudo) command. \r\n\r\n```bash\r\n~# adduser admin\r\n~# adduser admin sudo\r\n```\r\n### Login using the admin account\r\n\r\n```bash\r\n~# logout\r\n# now back at the local terminal prompt\r\n$ ssh admin@discoursetest.org\r\n```\r\n\r\n### Use apt-get to install core system dependencies\r\n\r\nThe apt-get command is used to add packages to Ubuntu (and all Debian based Linux distributions). DigitalOcean, like many VPS's, ships\r\nwith a limited Ubuntu configuration, so you will have to install many of the software the dependencies yourself.\r\n\r\nTo install system packages, you must have root privledges. Since the admin account is part of the sudo group, the\r\nadmin account can run commands with root privledges by using the sudo command. Just prepend sudo to any commands you\r\nwant to run as root. This includes apt-get commands to install packages.\r\n\r\n```bash\r\n# Install required packages\r\n$ sudo apt-get install postgresql-9.1 postgresql-contrib-9.1 make g++ \\\r\nlibxml2-dev libxslt-dev libpq-dev ruby1.9.3 git redis-server nginx postfix\r\n```\r\n\r\nDuring the installation, you will be prompted for Postfix configuration information. [Postfix](https://help.ubuntu.com/community/Postfix) is used to send mail from \r\nDiscourse. Just keep the default \"Internet Site.\"\r\n\r\nAt the next prompt just enter your domain name. In my test case this is discoursetest.org.\r\n\r\n### Editing configuration files\r\n\r\nAt various points in the installation procedure, you will need to edit configuration files with a text editor.\r\nVi is installed by default and is the de facto standard editor used by admins, so I use vi for any editing commands,\r\nbut you may want to consider installing the editor of your choice. I like emacs, so I installed it with: \r\n\r\n```\r\n$ sudo apt-get install emacs\r\n```\r\n\r\nMake sure you system packages are up to date.\r\n```\r\n$ sudo apt-get update\r\n```\r\n\r\n### Set the host name\r\n\r\nDigitalOcean's provisioning procedure doesn't correctly set the hostname when the instance is created, \r\nwhich is inconvient since they know your hostname at the point the instance is created. I'd recommend \r\nediting /etc/hosts to correctly contain your hostname.\r\n\r\n```bash\r\n$ vi /etc/hosts\r\n```\r\n\r\nThe first line of my /etc/hosts file looks like:\r\n```bash\r\n127.0.0.1  forum.discoursetest.org forum localhost\r\n```\r\n\r\nYou should replace discoursetest.org with your own domain name. \r\n\r\n\r\n### Install the Bundler app which installs Rails dependencies\r\n\r\n```bash\r\n$ sudo gem install bundler\r\n$ sudo gem install therubyracer -v '0.11.3'\r\n```\r\n\r\n### Configure Postgres user account\r\n\r\nDiscourse uses the Postgres database to store forum data. This is an easy way to setup the Postgres server, but it also creates a highly privledged Postgres user account. \r\nFuture revisions of this document may offer alternatives for creating the Postgres DBs, which would allow Discourse\r\nto login to Postgres as a user with lower privledges.\r\n\r\n```bash\r\n$ sudo -u postgres createuser admin -s -P\r\n```\r\n\r\n### Pull and configure the latest version of the Discourse app\r\n\r\nNow we are ready install the actual Discourse application. This will pull a copy of the Discourse app from my own branch. \r\nThe advantage of using this branch is that it has been tested with these instructions, but it may fall behind the master\r\nwhich is rapidly changing. \r\n\r\n```bash\r\n# Pull the latest version from github.\r\n$ git clone https://github.com/baus/discourse.git\r\n$ cd discourse\r\n# Now install the application dependencies using bundle\r\n$ bundle install\r\n```\r\n\r\n### Set Discourse application settings\r\nYou must set the Discourse application settings appropriately. The configuration files are in a directory called \"config\"\r\nThere are sample configuration files now included in the master branch, so you need to copy these files and\r\nmodify them with your own changes.\r\n\r\n```\r\n$ cd ~/discourse/config\r\n$ cp ./database.yml.sample ./database.yml\r\n$ cp ./redis.yml.sample ./redis.yml\r\n```\r\n\r\nNow you need to edit the configuration files and apply your own settings. \r\n\r\n\r\nStart by editing the database configuration file which should be now located at ~/discourse/config/database.yml\r\n\r\n```bash\r\n$ vi ~/discourse/config/database.yml\r\n```\r\n\r\nEdit the file to add your Postgres username and password to each configuration in the file. Also add host: localhost\r\nto the production configuration because the production DB will also be run on the localhost in this configuration.\r\n\r\nWhen you are done the file should look similar to:\r\n\r\n```\r\ndevelopment:\r\n  adapter: postgresql\r\n  database: discourse_development\r\n  username: admin\r\n  password: <your_postgres_password>\r\n  host: localhost\r\n  pool: 5\r\n  timeout: 5000\r\n  host_names:\r\n    - \"localhost\"\r\n\r\n# Warning: The database defined as \"test\" will be erased and\r\n# re-generated from your development database when you run \"rake\".\r\n# Do not set this db to the same as development or production.\r\ntest:\r\n  adapter: postgresql\r\n  database: discourse_test\r\n  username: admin\r\n  password: <your_postgres_password>\r\n  host: localhost\r\n  pool: 5\r\n  timeout: 5000\r\n  host_names:\r\n    - test.localhost\r\n\r\n# using the test db, so jenkins can run this config\r\n# we need it to be in production so it minifies assets\r\nproduction:\r\n  adapter: postgresql\r\n  database: discourse_development\r\n  username: admin\r\n  password: <your_postgres_password>\r\n  host: localhost\r\n  pool: 5\r\n  timeout: 5000\r\n  host_names:\r\n    - production.localhost\r\n```\r\n\r\nI'm not a fan of entering the DB password as clear text in the database.yml file. If you have a better solution\r\nto this, let me know. \r\n\r\n### Deploy the db and start the server\r\n\r\nNow you should be ready to deploy the database and start the server.\r\n\r\nThis will start the development environment on port 3000.\r\n```\r\n$ cd ~/discourse\r\n# Set Rails configuration\r\n$ export RAILS_ENV=development\r\n$ rake db:create db:migrate db:seed_fu\r\n$ thin start\r\n```\r\n\r\nI tested the configuration by going to http://discoursetest.org:3000/\r\n\r\n## Installing the production environment\r\n\r\n## WARNING: very preliminary instructions follows\r\n\r\n### Setup the www-data account\r\n```bash\r\n$ sudo mkdir /var/www\r\n$ sudo chgrp www-data /var/www\r\n$ sudo chmod g+w /var/www\r\n```\r\n\r\n### Configure nginx\r\n\r\n```bash\r\n$ cd ~/discourse/\r\n$ sudo cp config/nginx.sample.conf /etc/nginx/sites-available/discourse.conf\r\n$ sudo ln -s /etc/nginx/sites-available/discourse.conf /etc/nginx/sites-enabled/discourse.conf\r\n$ sudo rm /etc/nginx/sites-enabled/default\r\n$ sudo service nginx start\r\n```\r\n\r\n### Deploy Discourse app to /var/www\r\n```\r\n$ rake secret\r\n$ vi config/initializers/secret_token.rb\r\n$ export RAILS_ENV=production\r\n$ rake assets:precompile\r\n$ sudo -u www-data cp -r ~/discourse/ /var/www\r\n$ sudo -u www-data mkdir /var/www/discourse/tmp/sockets\r\n```\r\n\r\n### Start Thin as a daemon listening on domain sockets\r\n```bash\r\n$ cd /var/www/discourse\r\n$ sudo -u www-data thin start -e production -s4 --socket /var/www/discourse/tmp/sockets/thin.sock\r\n```\r\n\r\n### Start Sidekiq\r\n\r\n```bash\r\n$ sudo -u www-data sidekiq -e production -d -l /var/www/discourse/log/sidekiq.log\r\n```\r\n\r\n### Create Discourse admin account\r\n\r\n* Logon to site and create account using the application UI\r\n* Now make that account the admin:\r\n\r\n```bash\r\n$ cd /var/www/discourse\r\n$ sudo -u www-data rails c     \r\n$ u = User.first    \r\n$ u.admin = true    \r\n$ u.save  \r\n```\r\n### Start thin using init.d (work in progress)\r\n\r\n[Good explanation of the problems of using thin with init.d](http://jordanhollinger.com/2011/11/29/getting-bundler-and-thin-to-play-nicely)\r\n\r\n```bash\r\n$ sudo thin install\r\n$ sudo /usr/sbin/update-rc.d -f thin defaults\r\n```\r\n\r\nTodo: add script to create the admin account\r\n\r\n### Edit site settings\r\nThe default values are in: app/models/site_setting.rb\r\n* Logon to site with the admin account\r\n* Go to the site settings page: http://discoursetest.org/admin/site_settings\r\n* Set the notification_email. It is the from address used in emails from the system. I set it to info@discoursetest.org.\r\n* Set force_hostname to your domain name. I set it to discoursetest.org. This is used when generating URLs in emails.\r\n\r\n### TODO\r\n* Add clockwork instance\r\n* Add script to create the admin account.\r\n* Remove root ssh access\r\n* Add more information about email configuration and start sidekiq when testing development installation. Should the admin account be set when testing the development server?\r\n* Setup social network login (Is it possible to disable this feature?)\r\n* Add Sam Saffron's Ruby GC tunings\r\n* Add thin and sidekiq as init scripts. I find this cleaner than using bluepill\r\n* Create chef script based on the installation procedure\r\n* Lots of info on server configuration here: http://news.ycombinator.com/item?id=5316093\r\n* Add redis 2.6\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}